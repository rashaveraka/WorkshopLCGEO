###################################################################################################
#
#  DDSim 
#
#  Linear collider simulation models based on DD4hep and Geant4.  
#
#
#  F.Gaede, DESY, 2014
###################################################################################################


Requirements:
-------------
 - DD4hep built with Boost, Geant4 and LCIO
 - Gear


Download and Installation:
--------------------------

Downlaod source code, e.g:


  mkdir DDSim ; cd DDSim 

  svn co https://svnsrv.desy.de/public/ddsim/DDSim/trunk

  (or if you have developers rights:   svn co https://svnsrv.desy.de/basic/ddsim/DDSim/trunk)

  cd trunk ; mkdir build ; cd build


Initialize ROOT:

  . /afs/desy.de/project/ilcsoft/sw/x86_64_gcc44_sl6/root/5.34.10/bin/thisroot.sh

Configure with CMake specifying pathes to DD4hep, Geant4, LCIO and GEAR, e.g.:

   cmake -DDD4hep_DIR=~/DD4hep/trunk  \
         -DD4HEP_USE_BOOST=ON
         -D LCIO_DIR=/afs/desy.de/project/ilcsoft/sw/x86_64_gcc44_sl6/v01-17-05/lcio/v02-04-03 \
         -D GEAR_DIR=/afs/desy.de/project/ilcsoft/sw/x86_64_gcc44_sl6/v01-17-05/gear/v01-04 \
         -D Geant4_DIR=/afs/desy.de/project/ilcsoft/sw/x86_64_gcc44_sl6/geant4/9.6.p01/lib64/Geant4-9.6.1  ..


Build and install everything:

  make -j 2 install



Initialize the environment:

 . ./bin/thisDDSim.sh



Running the simulation
----------------------

There is a program called dd_sim in DD4hep which is based on DDG4 that runs the specified detector and the 
sequences (user actions) defined in the sequences.xml file.

Modify examples/DDG4_sequences.xml as needed. 


Depending on wether you want to use stdhep or an LCIO file with MCParticle collection as input, use the 
one of the follwing actions:

   <sequence name="Geant4GeneratorActionSequence/GeneratorAction">
      <action name="Geant4GeneratorActionInit/GenerationInit"/>

      <!-- <action name="LCIOInputAction/LCIO1"> -->
      <!--   <properties Input="LCIOStdHepReader|/Users/gaede/ILDConfig/trunk/StandardConfig/current/bbudsc_3evt.stdhep" -->
      <!-- 		    OutputLevel="4" -->
      <!-- 		    Mask="1" -->
      <!-- 		    MomentumScale="1."/> -->
      <!-- </action> -->

      <action name="LCIOInputAction/LCIO1">
        <properties Input="LCIOFileReader|mcparticles.slcio"
      	OutputLevel="4"
      	Mask="1"
      	MomentumScale="1."/>
      </action>

    ...


You can also modify the python script ./example/lcio_particle_gun.py in order to create
an LCIO input file with single particles:

  export PYTHONPATH=${LCIO}/src/python:${ROOTSYS}/lib
  python lcio_particle_gun.py


There is an example input file with 10 singe muons in example/mcparticles.slcio.


You can then run the simulation:

    dd_sim ../ILD/compact/ILD_o1_v05.xml ../example/DDG4_sequences.xml ../example/physics.xml

this creates an lcio file simple_lcio.slcio with sim hits and MCParticles - you can look at it:

   anajob simple_lcio.slcio


or display it in the teve display:

   ln -s simple_lcio.slcio teve_infile.slcio

   teveDisplay ../ILD/compact/ILD_o1_v05.xml


 or use the new DDEve:
 root
 .x $DD4hepINSTALL/examples/DDEve/DDEve.C()
 # and then load ./ILD/eve/DDEve.xml




=============================================================================================================

 Running the reconstruction with Marlin 
 ---------------------------------------

 EXPERIMENTAL !!


1. create a gear file from the DD4hep detector model, e.g.

   convertToGear default ../trunk/ILD/compact/ILD_o1_v05.xml gear_ILD_o1_v05_dd4hep.xml

 [ Friendly reminder: in order to work you need to explicitly build DD4hep with GEAR enabled. 
   Use the flag -DDD4HEP_USE_GEAR="ON" for the cmake command. ]

 Note: currently this is still incomplete
 In order to run tracking at least the following elements need to be added manually :

  <detector name="EcalBarrel" geartype="CalorimeterParameters">
  <detector name="EcalEndcap" geartype="CalorimeterParameters">

  for example from original Mokka gear files ( or use $DDSIM/example/gear_ILD_o1_v05_dd4hep.xml )



2. run simulation (as described above), e.g.:

 dd_sim ../ILD/compact/ILD_o1_v05.xml ../example/DDG4_sequences.xml ../example/physics.xml




3. run the standard reconstruction ( tracking only so far ):

 Marlin ../example/ild_dd4hep_stdreco.xml --global.LCIOInputFiles=./simple_lcio.slcio --MyLCIOOutputProcessor.LCIOOutputFile=./simple_lcio_REC.slcio



4. look at the result w/ the CED event display, e.g.

 ced2go -d ../example/gear_ILD_o1_v05_ORG.xml -t ../example/ced2go-template.xml simple_lcio_REC.slcio











